import java.util.*;

import static java.util.Arrays.stream;

// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,
// then press Enter. You can now see whitespace characters in your code.
public class Main {
    public static void main(String[] args) {
//        Problem1.main(args);
//        Problem2.main(args);
//        Problem3.main(args);
//        Problem4.main(args);
//        Problem5.main(args);
//        Problem6.main(args);
//        Problem7.main(args);
//        Problem8.main(args);
//        Problem9.main(args);
        Problem16.main(args);
    }
}

// If we list all natural numbers below 10 that are multiples of 3, 5, we get 3, 5, 6 and 9.
// The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

class Problem1 {
    public static void main(String[] args) {
        int sum = 0;
        for (int i = 0; i < 1000; i++)
        {
            if (i % 3 == 0 || i % 5 == 0)
            {
                sum+=i;
            }
        }
        System.out.println("Problem 1: " + sum);
    }
}

// Each new term in the Fibonacci sequence is generated by adding the previous two terms
// By considering the terms in the Fibonacci sequence whose values do not exceed 4 million, find the sum of even valued!

class Problem2 {
    public static void main(String[] args) {
        int sum = 0;
        int limit = 4000000;
        int n = 0;
        int fib = Fibonacci(n);

        while (fib <= limit)
        {
            if (fib % 2 == 0)
            {
                sum += fib;
            }
            n++;
            fib = Fibonacci(n);
        }

        System.out.println("Problem 2: " + sum);
    }
    
    private static int Fibonacci (int n)
    {
        if (n == 0 || n == 1) return n;
        return Fibonacci(n - 1) + Fibonacci(n - 2);
    }
}


class Problem3 {
    public static void main(String[] args) {
        long primeNumber = 600851475143L;
        largestPrimeNumber(primeNumber);

    }

    private static void largestPrimeNumber(long number)
    {
        int i;
        int largestPrime = 0;
        for (i = 2; i <= number; i++)
        {
            if (number % i == 0)
            {
                largestPrime = i;
                number /= i;
                i--;
            }
        }
        System.out.println("Problem 3: " + largestPrime);
    }
}


class Problem4 {
    public static void main(String[] args) {
        int largestPalindrome = 0;
        for (int i = 0; i < 1000; i++)
        {
            for (int j = 0; j < 1000; j++)
            {
                if (isPalindrome(i*j) && i*j > largestPalindrome)
                {
                    largestPalindrome = i*j;
                }
            }
        }

        System.out.println("Problem 4: " + largestPalindrome);
    }

    public static boolean isPalindrome(int number)
    {
        char[] digits = String.valueOf(number).toCharArray();
        StringBuilder reverse = new StringBuilder();
        for (int i = digits.length - 1; i >= 0; i--)
        {
            char digit = digits[i];
            reverse.append(digit);
        }

        return reverse.toString().equals(String.valueOf(number));
    }
}


//class Problem5 {
//    public static void main(String[] args) {
//        int number = 1;
//        int max = 20;
//        boolean found = false;
//        while (!found)
//        {
//            boolean[] divisible = new boolean[max - 1];
//            number++;
//            for(int i = 1; i < max; i++)
//            {
//                divisible[i - 1] = number % i == 0;
//            }
//            if (isAllTrue(divisible)){ found = true; }
//        }
//        System.out.println("Problem 5: " + number);
//    }
//
//    public static boolean isAllTrue(boolean[] array) {
//        for (boolean value : array) {
//            if (!value) {
//                return false;
//            }
//        }
//        return true;
//    }
//
//}


class Problem5 {
    public static void main(String[] args) {
        long result = findSmallestMultiple(20);
        System.out.println("Problem 5: " + result);
    }

    public static long findSmallestMultiple(int n) {
        long result = 1;
        for (int i = 2; i <= n; i++) {
            result = lcm(result, i);
        }
        return result;
    }

    public static long gcd(long a, long b) {
        while (b > 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    public static long lcm(long a, long b) {
        return a * (b / gcd(a, b));
    }
}


class Problem6 {
    public static void main(String[] args) {
        int number = 100;
        int sum = 0;
        int square = 0;

        for (int i = 0; i < number + 1; i++)
        {
            sum+=i;
            square+= (int) Math.pow(i, 2);
        }
        sum = (int) Math.pow(sum, 2);
        System.out.println("Problem 6: " + String.valueOf(sum-square));
    }
}


class Problem7 {
    public static void main(String[] args) {
        int number = 0;
        int length = 10000;
        int added = 0;
        int prime = 0;
        while (added <= length)
        {
            number++;
            if (isPrime(number)) {
                added++;
                prime = number;
            }
        }

        System.out.println("Problem 7: " + prime);
    }

    static boolean isPrime(int n)
    {
        // Corner case
        if (n <= 1)
            return false;

        // Check from 2 to n-1
        for (int i = 2; i < n; i++)
            if (n % i == 0)
                return false;

        return true;
    }
}

class Problem8
{
    public static void main(String[] args) {
        String numberStr = "73167176531330624919225119674426574742355349194934" +
                "96983520312774506326239578318016984801869478851843" +
                "85861560789112949495459501737958331952853208805511" +
                "12540698747158523863050715693290963295227443043557" +
                "66896648950445244523161731856403098711121722383113" +
                "62229893423380308135336276614282806444486645238749" +
                "30358907296290491560440772390713810515859307960866" +
                "70172427121883998797908792274921901699720888093776" +
                "65727333001053367881220235421809751254540594752243" +
                "52584907711670556013604839586446706324415722155397" +
                "53697817977846174064955149290862569321978468622482" +
                "83972241375657056057490261407972968652414535100474" +
                "82166370484403199890008895243450658541227588666881" +
                "16427171479924442928230863465674813919123162824586" +
                "17866458359124566529476545682848912883142607690042" +
                "24219022671055626321111109370544217506941658960408" +
                "07198403850962455444362981230987879927244284909188" +
                "84580156166097919133875499200524063689912560717606" +
                "05886116467109405077541002256983155200055935729725" +
                "71636269561882670428252483600823257530420752963450";


        // Do it
        List<Integer> integers = new ArrayList<>();
        for (int i = 0; i < numberStr.length(); i ++)
        {
            integers.add(Character.getNumericValue(numberStr.charAt(i)));
        }
        List<Integer> products = new ArrayList<>();

        List<Integer> window = new ArrayList<>();

        int counter = 12;

        for (int i=0; i < 13; i++){
            window.add(integers.get(i));
        }

        while (counter < 999) {
            products.add(ProductArray(window));
            window.remove(0);
            counter++;
            window.add(integers.get(counter));
        }

        System.out.println("Problem 8: " + Collections.max(products));



        int biggestProduct = 0;
        int length = 13;
        int[] bigProducts = new int[length];
        for (int i = 0; i < 1000 - length; i++)
        {
            for (int j = 0; j < length ; j++)
            {
                bigProducts[j] = Character.getNumericValue(numberStr.charAt(i+j));
            }
//            bigProducts[0] = Character.getNumericValue(numberStr.charAt(i));
//            bigProducts[1] = Character.getNumericValue(numberStr.charAt(i + 1));
//            bigProducts[2] = Character.getNumericValue(numberStr.charAt(i + 2));
//            bigProducts[3] = Character.getNumericValue(numberStr.charAt(i + 3));

            int product = ProductArray(bigProducts);
            if (product > biggestProduct)
            {
                biggestProduct = product;
            }
        }

        System.out.println("Problem 8: " + biggestProduct);
    }
    
    private static int ProductArray(int[] list)
    {
        int product = 1;
        for (int number: list)
        {
            product *= number;
        }

        return product;
    }

    private static int ProductArray(List<Integer> list)
    {
        int product = 1;
        for (int number: list)
        {
            product *= number;
        }

        return product;
    }
}


class Problem9{
    public static void main(String[] args) {
        int a;
        int b;
        int c;

        int limit = 1000;

        for (int i = 1; i < limit; i++)
        {
            for (int j = 2; j < limit; j++)
            {
                for (int k = 3; k < limit; k++)
                {
                    a = i;
                    b = j;
                    c = k;
                    int product = (int) (Math.pow(a, 2) + Math.pow(b, 2));
                    if (product == Math.pow(c, 2) && a < b && b < c && a + b + c == 1000)
                    {
                        System.out.println("A, B, C: " + a + ", " + b + ", " + c);
                        System.out.println("A, B, C: " + a*b*c);
                        return;
                    }
                }
            }
        }
    }
}


class Problem10
{
    public static void main(String[] args) {
        ArrayList<Integer> primes = new ArrayList<>();
        int sum = 0;
        int counter = 1;

        while (sum < 2_000_000)
        {
            if (isPrime(counter))
            {
                if (sum < 2_000_000)
                {
                    sum += counter;
                }
            }
            counter++;
        }
        System.out.println(sum);

    }

    static boolean isPrime(int n)
    {
        // Corner case
        if (n <= 1)
            return false;

        // Check from 2 to n-1
        for (int i = 2; i < n; i++)
            if (n % i == 0)
                return false;

        return true;
    }
}


class Problem16
{
    public static void main(String[] args) {
        double numbers = Math.pow(2, 1000);
        String value = String.valueOf(numbers);
        int sum = 0;
        for (int i = 0; i < value.length(); i++)
        {
            int number = Character.getNumericValue(value.charAt(i));
            sum += number;
        }

        System.out.println("Problem 16: " + sum);
    }
}